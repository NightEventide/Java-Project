/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Admin;

import DataStorage.CurrentUser;
import java.io.File;
import java.util.Scanner;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author seanl
 */
public class Viewaccounts extends javax.swing.JPanel {

    /**
     * Creates new form Viewaccounts
     */
    public Viewaccounts() {
        initComponents();
        CUser.setText(CurrentUser.getUsername());
        // Table
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // clear any existing dummy data
        populateUserTable(model, "ALL");
        //Combo box
        Selecttype.setModel(new javax.swing.DefaultComboBoxModel<>(
        new String[] { "All", "Admin", "Finance", "Inventory", "Purchase", "Sales" }
));
        Selecttype.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
        String selectedRole = (String) Selecttype.getSelectedItem();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Clear table
        populateUserTable(model, selectedRole); // Refill with filtered data
        

    }
});

    }

// Add these as instance variables
    
private void populateUserTable(DefaultTableModel model, String filterRole) {
    String[] roles = { "Admin", "Finance", "Inventory", "Purchase", "Sales" };

    for (String role : roles) {
        if (!filterRole.equals("All") && !filterRole.equals(role)) continue;

        File file = new File("src/DataStorage/" + role + ".txt");

        if (file.exists()) {
            try (Scanner scanner = new Scanner(file)) {
                while (scanner.hasNextLine()) {
                    String line = scanner.nextLine().trim();
                    String[] parts = line.split(",");
                    if (parts.length == 2) {
                        String username = parts[0].trim();
                        model.addRow(new Object[] { role, username });
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            System.out.println("Missing file: " + file.getAbsolutePath());
        }
    }
}

private void updateUserInFile(String role, String oldUsername, String newUsername, String newPassword) {
    File file = new File("src/DataStorage/" + role + ".txt");
    File tempFile = new File("src/DataStorage/" + role + "_temp.txt");

    try (Scanner scanner = new Scanner(file);
         java.io.PrintWriter writer = new java.io.PrintWriter(tempFile)) {

        while (scanner.hasNextLine()) {
            String line = scanner.nextLine();
            String[] parts = line.split(",");
            if (parts.length == 2 && parts[0].trim().equals(oldUsername)) {
                writer.println(newUsername + "," + newPassword);
            } else {
                writer.println(line);
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error updating user file.");
        return;
    }

    // Replace original file
    if (file.delete()) {
        tempFile.renameTo(file);
    } else {
        JOptionPane.showMessageDialog(this, "Failed to update user file.");
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Back = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        CUser = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Selecttype = new javax.swing.JComboBox<>();
        Edit = new javax.swing.JButton();
        delete = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(400, 305));

        Back.setText("Back");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DataStorage/user.jpg"))); // NOI18N

        CUser.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        CUser.setText("CUser");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("View Accounts");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "User Type", "Username"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        Selecttype.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        Edit.setText("Edit");
        Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditActionPerformed(evt);
            }
        });

        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Back)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(CUser, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addGap(17, 17, 17))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(152, 152, 152))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Selecttype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Edit)
                            .addComponent(delete))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(CUser, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1)
                        .addComponent(Back)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Selecttype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 101, Short.MAX_VALUE)
                        .addComponent(Edit)
                        .addGap(18, 18, 18)
                        .addComponent(delete)
                        .addGap(44, 44, 44))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
        // TODO add your handling code here:
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(this); // Get the current window
        frame.setContentPane(new Admindashboard()); // Set the new panel
        frame.revalidate(); // Refresh the layout
        frame.repaint();    // Redraw the window
    }//GEN-LAST:event_BackActionPerformed

    private void EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a user to edit.");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        String role = model.getValueAt(selectedRow, 0).toString();
        String oldUsername = model.getValueAt(selectedRow, 1).toString();

        // Prompt user for new details
        String newUsername = JOptionPane.showInputDialog(this, "Enter new username:", oldUsername);
        if (newUsername == null || newUsername.trim().isEmpty()) return;

        // Prompt for new password (masked)
        JPasswordField passwordField = new JPasswordField();
        int passwordOption = JOptionPane.showConfirmDialog(
            this, passwordField, "Enter new password:", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        if (passwordOption != JOptionPane.OK_OPTION) return;
        String newPassword = new String(passwordField.getPassword());

        // Prompt for confirmation (masked)
        JPasswordField confirmField = new JPasswordField();
        int confirmOption = JOptionPane.showConfirmDialog(
            this, confirmField, "Confirm new password:", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        if (confirmOption != JOptionPane.OK_OPTION) return;
        String confirmPassword = new String(confirmField.getPassword());

        // Check if passwords match
        if (!newPassword.equals(confirmPassword)) {
            JOptionPane.showMessageDialog(this, "Passwords do not match. Please try again.");
        return;
    }

        updateUserInFile(role, oldUsername, newUsername, newPassword);

    // Refresh table
    model.setRowCount(0);
    populateUserTable(model, Selecttype.getSelectedItem().toString());
    }//GEN-LAST:event_EditActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a user to delete.");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        String role = model.getValueAt(selectedRow, 0).toString();
        String usernameToDelete = model.getValueAt(selectedRow, 1).toString();

        int confirm = JOptionPane.showConfirmDialog(
            this,
            "Are you sure you want to delete user \"" + usernameToDelete + "\" from " + role + "?",
            "Confirm Delete",
            JOptionPane.YES_NO_OPTION
        );

        if (confirm != JOptionPane.YES_OPTION) return;

        File file = new File("src/DataStorage/" + role + ".txt");
        File tempFile = new File("src/DataStorage/" + role + "_temp.txt");

        try (
            Scanner scanner = new Scanner(file);
            java.io.PrintWriter writer = new java.io.PrintWriter(tempFile)
        ) {
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine().trim();
                if (!line.startsWith(usernameToDelete + ",")) {
                    writer.println(line);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred while deleting the user.");
            return;
        }

        if (!file.delete() || !tempFile.renameTo(file)) {
            JOptionPane.showMessageDialog(this, "Failed to update the file.");
            return;
        }

        // Refresh table
        model.setRowCount(0);
        populateUserTable(model, Selecttype.getSelectedItem().toString());
    }//GEN-LAST:event_deleteActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back;
    private javax.swing.JLabel CUser;
    private javax.swing.JButton Edit;
    private javax.swing.JComboBox<String> Selecttype;
    private javax.swing.JButton delete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
